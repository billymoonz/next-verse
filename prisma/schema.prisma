generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map(name: "user_id")
  type              String
  provider          String
  providerAccountId String   @map(name: "provider_account_id")
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map(name: "session_token")
  userId       String   @map(name: "user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map(name: "email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")

  accounts Account[]
  sessions Session[]

  admin Boolean?

  favoriteLessons FavoriteLessons[]
  lessonsOpened   LessonsOpened[]
  lessonsCreated  Lesson[]
  quizEntries     LessonEntry[]

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model Chapter {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @default(now()) @map(name: "updated_at")
  lessons     Lesson[]

  @@map(name: "course_chapters")
}

model Lesson {
  id          String            @id @default(cuid())
  name        String
  slug        String            @unique
  description String
  thumbnail   String            @db.LongText()
  video       String            @map(name: "video_key") @db.LongText()
  favorited   FavoriteLessons[]
  uniqueViews LessonsOpened[]
  createdAt   DateTime          @default(now()) @map(name: "created_at")
  updatedAt   DateTime          @default(now()) @map(name: "updated_at")
  questions   LessonQuestion[]
  entries     LessonEntry[]
  chapterId   String?           @map(name: "chapter_id")
  chapter     Chapter?          @relation(fields: [chapterId], references: [id], onDelete: SetNull)
  authorId    String?           @map(name: "author_id")
  author      User?             @relation(fields: [authorId], references: [id], onDelete: SetNull)

  @@map(name: "course_lessons")
}

model LessonEntry {
  id        String             @id @default(cuid())
  userId    String             @map(name: "user_id")
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson    Lesson             @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId  String             @map(name: "lesson_id")
  responses QuestionResponse[]

  @@map(name: "lesson_entries")
}

model LessonQuestion {
  id        String             @id @default(cuid())
  question  String
  answers   QuestionAnswer[]
  lessonId  String             @map(name: "lesson_id")
  lesson    Lesson             @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  responses QuestionResponse[]

  @@map(name: "lesson_questions")
}

model QuestionAnswer {
  id         String             @id @default(cuid())
  answer     String
  correct    Boolean
  responses  QuestionResponse[]
  questionId String             @map(name: "question_id")
  question   LessonQuestion     @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@map("lesson_question_answers")
}

model QuestionResponse {
  id            String         @id @default(cuid())
  answer        QuestionAnswer @relation(fields: [answerId], references: [id], onDelete: Cascade)
  answerId      String         @map(name: "answer_id")
  correct       Boolean
  questionId    String         @map(name: "question_id")
  question      LessonQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  entry         LessonEntry    @relation(fields: [lessonEntryId], references: [id], onDelete: Cascade)
  lessonEntryId String         @map(name: "lesson_entry_id")

  @@map("lesson_question_responses")
}

model FavoriteLessons {
  user     User   @relation(fields: [userId], references: [id])
  userId   String @map(name: "user_id")
  lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId String @map(name: "lesson_id")

  @@id([userId, lessonId])
  @@map("lessons_favorited")
}

model LessonsOpened {
  user     User   @relation(fields: [userId], references: [id])
  userId   String @map(name: "user_id")
  lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId String @map(name: "lesson_id")

  @@id([userId, lessonId])
  @@map("lessons_opened")
}
